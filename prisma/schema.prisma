// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  password      String
  email         String   @unique
  address       String
  cartId        Int      @unique @default(autoincrement())
  totalQuantity Int      @default(0)

  Product Product[]

  Order    Order[]
  CartItem CartItem[]

  @@map("users")
}

model Order {
  orderId    Int         @id @default(autoincrement())
  orderDate  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(pending)
  totalPrice Float
  userId     Int
  user       User        @relation(fields: [userId], references: [userId])
  OrderItem  OrderItem[]

  @@map("orders")
}

model Product {
  productId   Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int
  price       Float
  name        String
  description String
  stock       Int
  user        User        @relation(fields: [userId], references: [userId])
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("products")
}

model CartItem {
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [productId])
  user      User     @relation(fields: [cartId], references: [cartId])

  @@id([cartId, productId])
  @@map("cartItems")
}

model OrderItem {
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [productId])
  order     Order    @relation(fields: [orderId], references: [orderId])

  @@id([orderId, productId])
  @@map("orderItems")
}
enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  returned
  refunded
  failed
}
